package playboard

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestIsOver(t *testing.T) {
	testCases := []struct {
		name           string
		playboard      string
		expectedIsOver bool
		player1        *Player
		player2        *Player
	}{
		{
			name: "is over player 1",
			playboard: "11111.............." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
		},
		{
			name: "is over player 0",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..............00000",
			expectedIsOver: true,
		},
		{
			name: "is over horizontal",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"....00000.........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
		},
		{
			name: "is over vertical",
			playboard: "..................." +
				"..................." +
				".......1..........." +
				".......1..........." +
				".......1..........." +
				".......1..........." +
				".......1..........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
		},
		{
			name: "is over right diagonal",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"......0............" +
				".......0..........." +
				"........0.........." +
				".........0........." +
				"..........0........" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
		},
		{
			name: "is over left diagonal",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..............1...." +
				".............1....." +
				"............1......" +
				"...........1......." +
				"..........1........" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
		},
		{
			name: "is not over1",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...............1111" +
				"1.................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: false,
		},
		{
			name: "is not over2",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"............1......" +
				"............1......" +
				"............1......" +
				"............11.....",
			expectedIsOver: false,
		},
		{
			name: "is over by captures",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
			player1:        &Player{0, SymbolPlayer1},
			player2:        &Player{5, SymbolPlayer2},
		},
		{
			name: "is over by captures",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			expectedIsOver: true,
			player1:        &Player{5, SymbolPlayer1},
			player2:        &Player{0, SymbolPlayer2},
		},
		{
			name: "is over by no space left",
			playboard: "1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"1111111111111111111" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000" +
				"0000000000000000000",
			expectedIsOver: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.playboard, func(t *testing.T) {

			isOver := IsOver(tc.playboard, tc.player1, tc.player2)

			assert.Equal(t, tc.expectedIsOver, isOver)
		})
	}
}

func TestIsCapture(t *testing.T) {
	testCases := []struct {
		name              string
		playboard         string
		index             int
		currentPlayer     string
		expectedIsCapture bool
		expectedIndex1    int
		expectedIndex2    int
	}{
		{
			name: "is capture player 0",
			playboard: "0110.............." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			index:             0,
			currentPlayer:     SymbolPlayer1,
			expectedIsCapture: true,
			expectedIndex1:    1,
			expectedIndex2:    2,
		},
		{
			name: "is capture player 1",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...............1001",

			index:             357,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: true,
			expectedIndex1:    358,
			expectedIndex2:    359,
		},
		{
			name: "is capture right diagonal",
			playboard: "..................." +
				"...0..............." +
				"....1.............." +
				".....1............." +
				"......0............" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             22,
			currentPlayer:     SymbolPlayer1,
			expectedIsCapture: true,
			expectedIndex1:    42,
			expectedIndex2:    62,
		},
		{
			name: "is capture left diagonal",
			playboard: "..................." +
				".........0........." +
				"........1.........." +
				".......1..........." +
				"......0............" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             28,
			currentPlayer:     SymbolPlayer1,
			expectedIsCapture: true,
			expectedIndex1:    46,
			expectedIndex2:    64,
		},
		{
			name: "is capture vertical",
			playboard: "..................." +
				".........1........." +
				".........0........." +
				".........0........." +
				".........1........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             28,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: true,
			expectedIndex1:    47,
			expectedIndex2:    66,
		},
		{
			name: "is capture horizontal left",
			playboard: "..................." +
				"......1001........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             28,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: true,
			expectedIndex1:    27,
			expectedIndex2:    26,
		},
		{
			name: "is capture vertical upper",
			playboard: "..................." +
				".........1........." +
				".........0........." +
				".........0........." +
				".........1........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             85,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: true,
			expectedIndex1:    66,
			expectedIndex2:    47,
		},
		{
			name: "is capture right diagonal upper",
			playboard: "..................." +
				"...0..............." +
				"....1.............." +
				".....1............." +
				"......0............" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             82,
			currentPlayer:     SymbolPlayer1,
			expectedIsCapture: true,
			expectedIndex1:    62,
			expectedIndex2:    42,
		},
		{
			name: "is capture left diagonal upper",
			playboard: "..................." +
				".........0........." +
				"........1.........." +
				".......1..........." +
				"......0............" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             82,
			currentPlayer:     SymbolPlayer1,
			expectedIsCapture: true,
			expectedIndex1:    64,
			expectedIndex2:    46,
		},

		{
			name: "is not capture right diagonal",
			playboard: "..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..............1...." +
				"...............0..." +
				"................0..",

			index:             318,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: false,
		},
		{
			name: "is not capture full",
			playboard: "001................" +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",

			index:             2,
			currentPlayer:     SymbolPlayer2,
			expectedIsCapture: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.playboard, func(t *testing.T) {

			isCapture, index1, index2 := isCaptured(tc.playboard, tc.index, tc.currentPlayer)

			assert.Equal(t, tc.expectedIsCapture, isCapture)
			if isCapture {
				assert.Equal(t, tc.expectedIndex1, *index1)
				assert.Equal(t, tc.expectedIndex2, *index2)
			}
		})
	}
}

//TO DO name not playBoard in fail

func TestPutStone(t *testing.T) {
	testCases := []struct {
		name                string
		playboard           string
		pos                 *Pos
		currentPlayer       Player
		expectedNewSymbol   map[int]string
		expectedNumCaptures int
		expectedError       error
	}{
		{
			name: "is capture player 0",
			playboard: ".110..............." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			pos:           &Pos{0, 0},
			currentPlayer: Player{0, SymbolPlayer1},
			expectedNewSymbol: map[int]string{
				0: "0",
				1: ".",
				2: ".",
			},
			expectedNumCaptures: 1,
			expectedError:       nil,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.playboard, func(t *testing.T) {

			newPlayboard, err := PutStone(tc.playboard, tc.pos, &tc.currentPlayer)

			for index, symbol := range tc.expectedNewSymbol {
				assert.Equal(t, symbol, string(newPlayboard[index]))
			}
			assert.Equal(t, tc.expectedNumCaptures, tc.currentPlayer.captures)
			assert.Equal(t, tc.expectedError, err)
		})
	}
}

func TestIsForbidden(t *testing.T) {
	testCases := []struct {
		name              string
		playboard         string
		index             int
		currentPlayer     Player
		expectedForbidden bool
	}{
		{
			name: "is forbidden player 0",
			playboard: "..................." +
				"....000............" +
				"....0.............." +
				"....0.............." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			currentPlayer:     Player{0, SymbolPlayer1},
			index:             23,
			expectedForbidden: true,
		},
		{
			name: "is forbidden diagonal",
			playboard: "..................." +
				"..................." +
				"......1............" +
				".......1..........." +
				"........1.........." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"..................." +
				"...................",
			currentPlayer:     Player{0, SymbolPlayer1},
			index:             63,
			expectedForbidden: true,
		},
	}
	for _, tc := range testCases {
		t.Run(tc.playboard, func(t *testing.T) {

			isForbiddenPlace := isForbidden(tc.playboard, tc.index, tc.currentPlayer.symbol)

			assert.Equal(t, tc.expectedForbidden, isForbiddenPlace)
		})
	}
}
